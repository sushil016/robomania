generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id        String   @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teamName     String  @unique
  institution  String
  contactEmail String
  contactPhone String
  
  // Team Leader
  leaderName  String
  leaderEmail String
  leaderPhone String

  // Robot Details
  robotName        String
  robotWeight      Float
  robotDimensions  String
  weaponType      String
  
  // Team Members (excluding leader)
  members    TeamMember[]
  
  // Status
  status     RegistrationStatus @default(PENDING)
  paymentId  String?           // For payment tracking
  
  paymentStatus PaymentStatus @default(PENDING)
  paymentDate  DateTime?
  
  @@index([status])
  @@index([paymentStatus])
}

model TeamMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  email     String
  phone     String
  role      String
  
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String

  @@index([teamId])
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  WAITLISTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Contact {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  email     String
  message   String
  status    ContactStatus @default(PENDING)
  
  @@index([status])
}

model Newsletter {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String   @unique
  active    Boolean  @default(true)
}

enum ContactStatus {
  PENDING
  RESPONDED
  ARCHIVED
}

model Admin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String   @unique
  password  String
  name      String
  role      AdminRole @default(ADMIN)
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  team          Team?     // One user can have one team
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 